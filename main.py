import math
import random
from io import BytesIO
import datetime
import pytz

from PIL import Image, ImageDraw, ImageFont
import telebot
from telebot import types

TOKEN = "8050334935:AAHjnBLdw3NamG21cWMlrBAfgvvOBGMDoPA"
bot = telebot.TeleBot(TOKEN)
SPACE_FACTS = [
    "–°–æ–ª–Ω—Ü–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 99.86% –º–∞—Å—Å—ã –≤—Å–µ–π –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.",
    "–û–¥–∏–Ω –¥–µ–Ω—å –Ω–∞ –í–µ–Ω–µ—Ä–µ –¥–ª–∏—Ç—Å—è –¥–æ–ª—å—à–µ, —á–µ–º –æ–¥–∏–Ω –≥–æ–¥ –Ω–∞ –ó–µ–º–ª–µ.",
    "–ö–æ—Å–º–æ—Å –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ–∑–∑–≤—É—á–µ–Ω, —Ç–∞–∫ –∫–∞–∫ —Ç–∞–º –Ω–µ—Ç –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∑–≤—É–∫–∞.",
    "–ù–∞ –õ—É–Ω–µ –µ—Å—Ç—å —Å–ª–µ–¥—ã, –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∞—Å—Ç—Ä–æ–Ω–∞–≤—Ç–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ—Å—Ç–∞–Ω—É—Ç—Å—è —Ç–∞–º –º–∏–ª–ª–∏–æ–Ω—ã –ª–µ—Ç.",
    "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –∫–æ—Å–º–∏—á–µ—Å–∫–∞—è —Å—Ç–∞–Ω—Ü–∏—è (–ú–ö–°) –≤—Ä–∞—â–∞–µ—Ç—Å—è –≤–æ–∫—Ä—É–≥ –ó–µ–º–ª–∏ –∫–∞–∂–¥—ã–µ 90 –º–∏–Ω—É—Ç.",
    "–í –≥–∞–ª–∞–∫—Ç–∏–∫–µ –ú–ª–µ—á–Ω—ã–π –ü—É—Ç—å –æ–∫–æ–ª–æ 100-400 –º–∏–ª–ª–∏–∞—Ä–¥–æ–≤ –∑–≤–µ–∑–¥.",
    "–°–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è –≥–æ—Ä–∞ –≤ –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ - –û–ª–∏–º–ø –Ω–∞ –ú–∞—Ä—Å–µ, –≤—ã—Å–æ—Ç–æ–π 21.9 –∫–º.",
    "–ï—Å–ª–∏ –¥–≤–∞ –∫—É—Å–∫–∞ –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ –º–µ—Ç–∞–ª–ª–∞ —Å–æ–ø—Ä–∏–∫–æ—Å–Ω—É—Ç—Å—è –≤ –∫–æ—Å–º–æ—Å–µ, –æ–Ω–∏ –Ω–∞–≤—Å–µ–≥–¥–∞ —Å–æ–µ–¥–∏–Ω—è—Ç—Å—è.",
    "–ó–µ–º–ª—è - –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ –≤ –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ, –≥–¥–µ –≤–æ–¥–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç—Ä–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö.",
    "–°–≤–µ—Ç –æ—Ç –°–æ–ª–Ω—Ü–∞ –¥–æ—Å—Ç–∏–≥–∞–µ—Ç –ó–µ–º–ª–∏ –∑–∞ 8 –º–∏–Ω—É—Ç –∏ 20 —Å–µ–∫—É–Ω–¥."
]
CONSTELLATIONS = {
    "–û—Ä–∏–æ–Ω": [
        (80, 100, "–ë–µ—Ç–µ–ª—å–≥–µ–π–∑–µ", "–∫—Ä–∞—Å–Ω—ã–π"),
        (180, 50, "–†–∏–≥–µ–ª—å", "–≥–æ–ª—É–±–æ–π"),
        (150, 120, "–ë–µ–ª–ª–∞—Ç—Ä–∏–∫—Å", "–≥–æ–ª—É–±–æ–π"),
        (120, 90, "–ê–ª—å–Ω–∏—Ç–∞–∫", "–≥–æ–ª—É–±–æ–π"),
        (130, 80, "–ê–ª—å–Ω–∏–ª–∞–º", "–≥–æ–ª—É–±–æ–π"),
        (140, 70, "–ú–∏–Ω—Ç–∞–∫–∞", "–≥–æ–ª—É–±–æ–π"),
        (100, 110, "–°–∞–∏—Ñ", "–≥–æ–ª—É–±–æ–π")
    ],
    "–ë–æ–ª—å—à–∞—è –ú–µ–¥–≤–µ–¥–∏—Ü–∞": [
        (50, 50, "–î—É–±—Ö–µ", "–æ—Ä–∞–Ω–∂–µ–≤—ã–π"),
        (100, 60, "–ú–µ—Ä–∞–∫", "–±–µ–ª—ã–π"),
        (150, 70, "–§–µ–∫–¥–∞", "–±–µ–ª—ã–π"),
        (200, 80, "–ú–µ–≥—Ä–µ—Ü", "–±–µ–ª—ã–π"),
        (250, 90, "–ê–ª–∏–æ—Ç", "–±–µ–ª—ã–π"),
        (300, 100, "–ú–∏—Ü–∞—Ä", "–±–µ–ª—ã–π"),
        (350, 110, "–ê–ª—å–∫–∞–∏–¥", "–±–µ–ª—ã–π")
    ],
    "–õ–µ–±–µ–¥—å": [
        (100, 100, "–î–µ–Ω–µ–±", "–≥–æ–ª—É–±–æ–π"),
        (150, 150, "–ê–ª—å–±–∏—Ä–µ–æ", "–∑–æ–ª–æ—Ç–æ–π"),
        (120, 120, "–°–∞–¥—Ä", "–≥–æ–ª—É–±–æ–π"),
        (180, 180, "–ì–∏–µ–Ω–∞—Ö", "–≥–æ–ª—É–±–æ–π")
    ]
}
PLANETS = {
    "–ú–µ—Ä–∫—É—Ä–∏–π": {"size": 4, "color": "—Å–µ—Ä—ã–π", "distance": 30, "speed": 4.1, "moons": 0},
    "–í–µ–Ω–µ—Ä–∞": {"size": 9, "color": "–∂—ë–ª—Ç—ã–π", "distance": 50, "speed": 1.6, "moons": 0},
    "–ó–µ–º–ª—è": {"size": 10, "color": "—Å–∏–Ω–∏–π", "distance": 70, "speed": 1, "moons": 1},
    "–ú–∞—Ä—Å": {"size": 7, "color": "–∫—Ä–∞—Å–Ω—ã–π", "distance": 90, "speed": 0.5, "moons": 2},
    "–Æ–ø–∏—Ç–µ—Ä": {"size": 20, "color": "–æ—Ä–∞–Ω–∂–µ–≤—ã–π", "distance": 120, "speed": 0.08, "moons": 79},
    "–°–∞—Ç—É—Ä–Ω": {"size": 17, "color": "–∑–æ–ª–æ—Ç–æ–π", "distance": 150, "speed": 0.03, "moons": 82},
    "–£—Ä–∞–Ω": {"size": 12, "color": "–≥–æ–ª—É–±–æ–π", "distance": 180, "speed": 0.01, "moons": 27},
    "–ù–µ–ø—Ç—É–Ω": {"size": 11, "color": "—Ç—ë–º–Ω–æ-—Å–∏–Ω–∏–π", "distance": 210, "speed": 0.006, "moons": 14}
}
user_states = {}

def generate_star_chart(lat: float, lon: float, time: datetime.datetime, width=400, height=400) -> BytesIO:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–≤–µ–∑–¥–Ω–æ–µ –Ω–µ–±–æ –¥–ª—è –∑–∞–¥–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏ –≤—Ä–µ–º–µ–Ω–∏"""
    img = Image.new("RGB", (width, height), "black")
    draw = ImageDraw.Draw(img)
    time_factor = (time.hour + time.minute/60) / 24
    lat_factor = abs(lat) / 90
    lon_factor = (lon % 360) / 360
    num_stars = 200
    for _ in range(num_stars):
        x = random.randint(0, width)
        y = random.randint(0, height)
        size = random.randint(1, 3)
        brightness = random.randint(150, 255)
        star_type = random.random()
        if star_type < 0.7:
            color = (brightness, brightness, brightness)  # –±–µ–ª—ã–π
        elif star_type < 0.85:
            color = (brightness, brightness//2, brightness//3)  # –∂–µ–ª—Ç—ã–π
        elif star_type < 0.95:
            color = (brightness//3, brightness//3, brightness)  # –≥–æ–ª—É–±–æ–π
        else:
            color = (brightness, brightness//4, brightness//4)  # –∫—Ä–∞—Å–Ω—ã–π
        
        draw.ellipse([x-size, y-size, x+size, y+size], fill=color)

    for constellation, stars in CONSTELLATIONS.items():
        for star in stars:
            x, y, name, color_name = star
            x = int(x * (0.7 + 0.3 * lon_factor))
            y = int(y * (0.7 + 0.3 * lat_factor))
            
            if color_name == "–∫—Ä–∞—Å–Ω—ã–π":
                color = (255, 50, 50)
            elif color_name == "–≥–æ–ª—É–±–æ–π":
                color = (50, 50, 255)
            elif color_name == "–æ—Ä–∞–Ω–∂–µ–≤—ã–π":
                color = (255, 165, 0)
            elif color_name == "–∑–æ–ª–æ—Ç–æ–π":
                color = (255, 215, 0)
            else:
                color = (255, 255, 255)
            
            size = random.randint(2, 4)
            draw.ellipse([x-size, y-size, x+size, y+size], fill=color)

    buf = BytesIO()
    img.save(buf, format="PNG")
    buf.seek(0)
    return buf

def generate_planet_system(planet_name: str, width=400, height=400) -> BytesIO:
    img = Image.new("RGB", (width, height), "black")
    draw = ImageDraw.Draw(img)
    font = ImageFont.truetype("ARIAL.ttf", 15, encoding="utf-8")
    sun_radius = 30
    draw.ellipse([width//2-sun_radius, height//2-sun_radius, 
                  width//2+sun_radius, height//2+sun_radius], 
                 fill="yellow")
    # –æ—Ä–±–∏—Ç—ã –∏ –ø–ª–∞–Ω–µ—Ç—ã
    for name, data in PLANETS.items():
        distance = data["distance"]
        radius = data["size"]
        color = data["color"]
        draw.ellipse([width//2-distance, height//2-distance, 
                      width//2+distance, height//2+distance], 
                     outline="gray", width=1)
        # –ü–ª–∞–Ω–µ—Ç–∞
        now = datetime.datetime.now()
        angle = (now.second + now.microsecond/1000000) * data["speed"] * math.pi / 30
        x = width//2 + distance * math.cos(angle)
        y = height//2 + distance * math.sin(angle)
        planet_color = {
            "gray": (150, 150, 150),
            "yellow": (255, 255, 0),
            "blue": (0, 0, 255),
            "red": (255, 0, 0),
            "orange": (255, 165, 0),
            "gold": (255, 215, 0),
            "lightblue": (173, 216, 230),
            "darkblue": (0, 0, 139)
        }.get(color, (255, 255, 255))
        
        draw.ellipse([x-radius, y-radius, x+radius, y+radius], fill=planet_color)
        if name == planet_name:
            draw.text((x, y-radius-15), name, fill="white", font=font)
    
    buf = BytesIO()
    img.save(buf, format="PNG")
    buf.seek(0)
    return buf

def generate_constellation_image(constellation_name: str, width=400, height=400) -> BytesIO:
    img = Image.new("RGB", (width, height), "black")
    draw = ImageDraw.Draw(img)
    if constellation_name not in CONSTELLATIONS:
        constellation_name = "–û—Ä–∏–æ–Ω"
    stars = CONSTELLATIONS[constellation_name]

    star_coords = []
    for star in stars:
        x, y, name, color_name = star
        x = int(x * width / 400)
        y = int(y * height / 400)
        star_coords.append((x, y, name, color_name))
        
        if color_name == "–∫—Ä–∞—Å–Ω—ã–π":
            color = (255, 50, 50)
        elif color_name == "–≥–æ–ª—É–±–æ–π":
            color = (50, 50, 255)
        elif color_name == "–æ—Ä–∞–Ω–∂–µ–≤—ã–π":
            color = (255, 165, 0)
        elif color_name == "–∑–æ–ª–æ—Ç–æ–π":
            color = (255, 215, 0)
        else:
            color = (255, 255, 255)
        
        size = random.randint(3, 5)
        draw.ellipse([x-size, y-size, x+size, y+size], fill=color)

    if constellation_name == "–û—Ä–∏–æ–Ω":
        lines = [(0,1), (1,2), (2,3), (3,4), (4,5), (5,6), (6,0)]
    elif constellation_name == "–ë–æ–ª—å—à–∞—è –ú–µ–¥–≤–µ–¥–∏—Ü–∞":
        lines = [(0,1), (1,2), (2,3), (3,4), (4,5), (5,6)]
    else:
        lines = [(0,1), (1,2), (2,3), (3,0)] # –õ–∏–Ω–∏–∏ –¥–ª—è –õ–µ–±–µ–¥—è
    
    for i, j in lines:
        if i < len(star_coords) and j < len(star_coords):
            x1, y1, _, _ = star_coords[i]
            x2, y2, _, _ = star_coords[j]
            draw.line([x1, y1, x2, y2], fill="white", width=1)

    font = ImageFont.truetype("ARIAL.ttf", 15, encoding="utf-8")
    draw.text((10, 10), constellation_name, fill="white", font=font)
    
    buf = BytesIO()
    img.save(buf, format="PNG")
    buf.seek(0)
    return buf

@bot.message_handler(commands=['start'])
def send_welcome(message):
    user = message.from_user
    welcome_text = f"""
üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}, –≤ Cosmic! üåå

–Ø - –≤–∞—à –≥–∏–¥ –ø–æ –≤—Å–µ–ª–µ–Ω–Ω–æ–π. –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É:

üî≠ /stars - –ü–æ–∫–∞–∑–∞—Ç—å –∑–≤–µ–∑–¥–Ω–æ–µ –Ω–µ–±–æ –¥–ª—è –≤–∞—à–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
ü™ê /planets - –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –ø–ª–∞–Ω–µ—Ç—ã –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
‚ú® /constellations - –£–∑–Ω–∞—Ç—å –æ —Å–æ–∑–≤–µ–∑–¥–∏—è—Ö
üå† /fact - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç
üéØ /quiz - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –æ –∫–æ—Å–º–æ—Å–µ

–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ!
"""
    
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn1 = types.KeyboardButton('üî≠ –ó–≤–µ–∑–¥–Ω–æ–µ –Ω–µ–±–æ')
    btn2 = types.KeyboardButton('ü™ê –ü–ª–∞–Ω–µ—Ç—ã')
    btn3 = types.KeyboardButton('‚ú® –°–æ–∑–≤–µ–∑–¥–∏—è')
    btn4 = types.KeyboardButton('üå† –ö–æ—Å–º–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç')
    btn5 = types.KeyboardButton('üéØ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞')
    markup.add(btn1, btn2, btn3, btn4, btn5)
    
    bot.send_message(message.chat.id, welcome_text, reply_markup=markup)

@bot.message_handler(commands=['stars'])
def ask_location_for_stars(message):
    user_states[message.chat.id] = "waiting_location_stars"
    bot.send_message(message.chat.id, "üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (–º–æ–∂–Ω–æ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ) "
                                      "–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ '—à–∏—Ä–æ—Ç–∞,–¥–æ–ª–≥–æ—Ç–∞' "
                                      "(–Ω–∞–ø—Ä–∏–º–µ—Ä: 55.75, 37.62 –¥–ª—è –ú–æ—Å–∫–≤—ã).")

@bot.message_handler(func=lambda m: user_states.get(m.chat.id) == "waiting_location_stars")
def process_location_for_stars(message):
    try:
        chat_id = message.chat.id
        if message.location:
            lat = message.location.latitude
            lon = message.location.longitude
        else:
            coords = message.text.split(",")
            lat = float(coords[0].strip())
            lon = float(coords[1].strip())
        
        now = datetime.datetime.now(pytz.utc)
        star_chart = generate_star_chart(lat, lon, now)
        
        bot.send_photo(chat_id, star_chart, caption=f"üå† –ó–≤–µ–∑–¥–Ω–æ–µ –Ω–µ–±–æ –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {lat:.2f}, {lon:.2f}\n"
                                                  f"üïí –í—Ä–µ–º—è: {now.strftime('%Y-%m-%d %H:%M:%S')} UTC")
        del user_states[chat_id]
    
    except Exception as e:
        bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ "
                              "–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ '—à–∏—Ä–æ—Ç–∞,–¥–æ–ª–≥–æ—Ç–∞'.")
        print(f"Error: {e}")


@bot.message_handler(commands=['planets'])
def show_planets_menu(message):
    markup = types.InlineKeyboardMarkup()
    for planet in PLANETS.keys():
        markup.add(types.InlineKeyboardButton(planet, callback_data=f"planet_{planet}"))

    bot.send_message(message.chat.id, "ü™ê –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω–µ—Ç—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('planet_'))
def show_planet_info(call):
    planet_name = call.data.split('_')[1]
    planet_data = PLANETS.get(planet_name)

    if planet_data:
        planet_image = generate_planet_system(planet_name)
        description = f"""
ü™ê *{planet_name}*

‚Ä¢ –†–∞–∑–º–µ—Ä: {planet_data['size']} –ø–∏–∫—Å–µ–ª–µ–π (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ó–µ–º–ª–∏)
‚Ä¢ –¶–≤–µ—Ç: {planet_data['color']}
‚Ä¢ –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –°–æ–ª–Ω—Ü–∞: {planet_data['distance']} —É—Å–ª. –µ–¥.
‚Ä¢ –°–ø—É—Ç–Ω–∏–∫–æ–≤: {planet_data['moons']}
"""
        description = (description.replace
                       ("(", "\\(").replace(")", "\\)").replace(".", "\\."))
        bot.send_photo(call.message.chat.id, planet_image, caption=description, parse_mode="MarkdownV2")
    else:
        bot.answer_callback_query(call.id, "–ü–ª–∞–Ω–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

@bot.message_handler(commands=['constellations'])
def show_constellations_menu(message):
    markup = types.InlineKeyboardMarkup()
    for constellation in CONSTELLATIONS.keys():
        markup.add(types.InlineKeyboardButton(constellation, callback_data=f"constellation_{constellation}"))
    
    bot.send_message(message.chat.id, "‚ú® –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–∑–≤–µ–∑–¥–∏–µ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('constellation_'))
def show_constellation_info(call):
    constellation_name = call.data.split('_')[1]
    stars = CONSTELLATIONS.get(constellation_name)
    
    if stars:
        constellation_image = generate_constellation_image(constellation_name)
        description = f"""
‚ú® *{constellation_name}*

–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—Ä–∫–∏—Ö –∑–≤–µ–∑–¥: {len(stars)}
–ì–ª–∞–≤–Ω—ã–µ –∑–≤–µ–∑–¥—ã:
"""
        for star in stars[:3]:
            _, _, name, color = star
            description += f"‚Ä¢ {name} ({color})\n"

        description = description.replace("(", "\\(").replace(")", "\\)").replace(".", "\\.")
        bot.send_photo(call.message.chat.id, constellation_image, caption=description, parse_mode="Markdown")
    else:
        bot.answer_callback_query(call.id, "–°–æ–∑–≤–µ–∑–¥–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

@bot.message_handler(commands=['fact'])
def send_space_fact(message):
    fact = random.choice(SPACE_FACTS)
    bot.send_message(message.chat.id, f"üåå *–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç:*\n\n{fact}", parse_mode="Markdown")

@bot.message_handler(commands=['quiz'])
def start_space_quiz(message):
    questions = [
        {
            "question": "–ö–∞–∫–∞—è –ø–ª–∞–Ω–µ—Ç–∞ —Å–∞–º–∞—è –≥–æ—Ä—è—á–∞—è –≤ –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ?",
            "options": ["–ú–µ—Ä–∫—É—Ä–∏–π", "–í–µ–Ω–µ—Ä–∞", "–ú–∞—Ä—Å", "–Æ–ø–∏—Ç–µ—Ä"],
            "answer": 1
        },
        {
            "question": "–°–∫–æ–ª—å–∫–æ —Å–ø—É—Ç–Ω–∏–∫–æ–≤ —É –ú–∞—Ä—Å–∞?",
            "options": ["0", "1", "2", "4"],
            "answer": 2
        },
        {
            "question": "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –≥–∞–ª–∞–∫—Ç–∏–∫–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ó–µ–º–ª—è?",
            "options": ["–ê–Ω–¥—Ä–æ–º–µ–¥–∞", "–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫", "–ú–ª–µ—á–Ω—ã–π –ü—É—Ç—å", "–°–æ–º–±—Ä–µ—Ä–æ"],
            "answer": 2
        }
    ]
    
    user_states[message.chat.id] = {
        "quiz": True,
        "questions": questions,
        "current_question": 0,
        "score": 0
    }
    
    ask_quiz_question(message.chat.id)

def ask_quiz_question(chat_id):
    user_state = user_states.get(chat_id)
    if not user_state or not user_state.get("quiz"):
        return
    
    current = user_state["current_question"]
    questions = user_state["questions"]
    
    if current >= len(questions):
        score = user_state["score"]
        total = len(questions)
        bot.send_message(chat_id, f"üéØ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{total}")
        del user_states[chat_id]
        return
    
    question_data = questions[current]
    markup = types.InlineKeyboardMarkup()
    for i, option in enumerate(question_data["options"]):
        markup.add(types.InlineKeyboardButton(option, callback_data=f"quiz_{current}_{i}"))
    
    bot.send_message(chat_id, f"‚ùì –í–æ–ø—Ä–æ—Å {current+1}/{len(questions)}:\n\n{question_data['question']}", 
                    reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('quiz_'))
def handle_quiz_answer(call):
    try:
        _, q_index, a_index = call.data.split('_')
        q_index = int(q_index)
        a_index = int(a_index)
        
        chat_id = call.message.chat.id
        user_state = user_states.get(chat_id)
        
        if not user_state or not user_state.get("quiz"):
            bot.answer_callback_query(call.id, "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞")
            return
        
        question = user_state["questions"][q_index]
        if a_index == question["answer"]:
            user_state["score"] += 1
            bot.answer_callback_query(call.id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
        else:
            correct_answer = question["options"][question["answer"]]
            bot.answer_callback_query(call.id, f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")

        user_state["current_question"] += 1
        ask_quiz_question(chat_id)
    
    except Exception as e:
        print(f"Error handling quiz answer: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    text = message.text.lower()
    
    if text in ['üî≠ –∑–≤–µ–∑–¥–Ω–æ–µ –Ω–µ–±–æ', '–∑–≤–µ–∑–¥–Ω–æ–µ –Ω–µ–±–æ', '–∑–≤–µ–∑–¥—ã']:
        ask_location_for_stars(message)
    elif text in ['ü™ê –ø–ª–∞–Ω–µ—Ç—ã', '–ø–ª–∞–Ω–µ—Ç—ã']:
        show_planets_menu(message)
    elif text in ['‚ú® —Å–æ–∑–≤–µ–∑–¥–∏—è', '—Å–æ–∑–≤–µ–∑–¥–∏—è']:
        show_constellations_menu(message)
    elif text in ['üå† –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç', '—Ñ–∞–∫—Ç']:
        send_space_fact(message)
    elif text in ['üéØ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞', '–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞']:
        start_space_quiz(message)
    else:
        bot.reply_to(message, "üöÄ –Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã.")

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.infinity_polling()